#pragma once
#include "oepEntity.h"
#include "CommonInclude.h"
#include "oepGameObject.h"

namespace oep {
	//Layer 클래스 - 화면에 레이어를 만드는 클래스
	//지금까지는 오브젝트를 그냥 씬에서 생성하고 출력하는 방식을 사용하여 구현을 해왔다. 그러나 이렇게 되면 문제가 하나 생기는데 오브젝트의 생성 순서에 따라 어떤 오브젝트는 안 보이는 경우가 생기게 된다.
	//이는 순서대로 오브젝트가 생기면서 위치가 같아서 겹쳐지면서 앞에 있는 오브젝트에 가려져 뒤에 있는 오브젝트가 안 보이게 되는 것인데 이러면 게임의 플레이에 영향을 줄 수 밖에 없다.
	//예를 들어 플랫포머 게임을 만들었다 가정하면 프로그래머의 실수로 플레이어 오브젝트가 배경 오브젝트에 가려져서 안 보이는 상황이 오면 정상적인 게임 동작이 불가능해지게 되는 불상사가 발생한다.
	//이렇게 되지 않기 위해서는 코드를 작성할 때 오브젝트의 위치를 계산해서 정확하게 알맞는 순서대로 코드로 오브젝트를 추가해야 하는데 씬 하나에 수많은 오브젝트가 있는데 이를 전부 신경쓰면서 코드를 작성하기는
	//어려움이 있고 실수가 있을 수도 있기 때문에 이러한 문제점을 보완하기 위해서 사용하는 것이 레이어라는 것이다. 레이어는 층이라는 뜻으로 말 그대로 화면에 안 보이는 층을 나누어 오브젝트들을 배치시키면
	//오브젝트 추가할 때 순서 상관없이 알맞은 레이어만 설정해주면 되기 때문에 레이어를 만들어 사용하여야 한다.
	class Layer
	{
	public:
		Layer();

		virtual void Initialize();
		virtual void Update();
		virtual void LateUpdate();
		virtual void Render(HDC hdc);

		void AddGameObject(GameObject* gameObj);

		~Layer();

	private:
		//int mLayer;  //오브젝트가 어느 레이언지 알아야 하기 때문에 어느 레이언지 저장하기 위한 변수

		//이렇게 int를 사용하여 나누는 것보다는 열거형을 써서 층마다 이름을 붙일 수 있으면 조금 더 직관적이고 가독성이 높아질 수 있기에 열거형을 사용하는 것이 나을 수 있다.
		//eLayerType mType;  //레이어 타입을 알리는 변수는 당장에는 필요가 없어보이니 지워준다.
		std::vector<GameObject*> mGameObjects;  //각 레이어에 배치된 게임 오브젝트들
	};
}
