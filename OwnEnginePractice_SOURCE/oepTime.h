#pragma once
#include "CommonInclude.h"  //프로그램의 진동수를 구하기 위해서는 윈도우 API의 함수를 사용하기 때문에 Windows헤더 파일을 포함하고 있는 파일을 #include 해준다.

namespace oep {
	//Time 클래스 - 시간 클래스
	//지금까지 진행한 프로그램은 도형을 동일한 시간 동안 이동시켜도 컴퓨터마다 이동 거리에 차이가 발생하였다. 그 이유는 컴퓨터의 성능(CPU 등)에 따라 연산 속도가 달라 1초에 루프를 돌리는 속도의 차이가 있기 때문이다.
	//간단히 설명하면 A CPU와 B CPU가 있다고 하고 A가 B의 2배의 성능이라고 가정하면 B가 한 번의 루프를 돌 때 A는 두 번의 루프를 돌게 되고 그러면 도형이 1초에 한 루프를 돌 수 있고 한 루프당 1을 움직인다고 가정하면 
	//1초 동안 도형을 A는 2, B는 1을 이동시킬 수 있는 것이다. 이러면 문제가 되는 것이 온라인 레이싱 게임이라 치면 성능이 더 좋은 컴퓨터의 이동 속도가 더 빨라서 무조건 이기는 공정성 문제를 야기하게 된다.
	//그래서 이를 해결하기 위해서 Time 클래스를 만들었고 이 클래스로 입력에 대한 결과 값이 어느 컴퓨터든 동일하게 나올 수 있도록 만들어야 한다.

	//보통 게임 소식을 접하면 안정적으로 60프레임을 지원한다라는 얘기를 들어볼 수 있는데 여기서 프레임이란 1초에 화면이 얼마나 다시 그려지는지를 나타내는 단위로 60프레임은 1초에 60번 다시 그려진다는 의미이다.
	//보통 프로그램의 모든 로직 루프를 한 번 도는 것을 1프레임이라고 하는데 60프레임이라는 것은 1초 동안 60번의 루프를 돌았다는 얘기가 된다. 그러면 동일한 1m를 이동한다고 해도 60프레임짜리보다 90프레임짜리가
	//더 많이 화면을 다시 그려내기 때문에 더 부드럽운 동작을 보여준다. 그러나 입력에 대한 결과값은 동일하다. 
	class Time
	{
		//위에서 얘기한 컴퓨터 성능에 상관없이 동일한 결과 값을 내려고 하면 어떻게 해야 할까?
		//그 방법 중 하나는 차등 값을 곱해주어 결과 값을 맞추어 주는 방법이다. 이때 차등 값으로는 1프레임 당 실행하는 시간(DeltaTime)을 사용할 예정이다.
		//컴퓨터마다 DeltaTime이 다르고 입력에 대한 결과 값도 다르지만 결과 값에 DeltaTime을 곱한 결과는 동일할 것이다. 예를 들어 20프레임짜리 A 컴퓨터가 1초 동안 20m를 이동하고 10프레임짜리 B 컴퓨터가 
		//1초 동안 10m 이동한다고 가정하면 A의 DeltaTime은 0.05로 결과 값 20과 곱하면 1이고 B의 DeltaTime은 0.1로 10과 곱하면 1이 되어 동일한 것을 알 수 있다.
		//그렇기 때문에 성능 상관없이 동일한 결과 값을 도출하기 위해 차등 값을 결과 값에 곱해주는데 그 차등 값을 DeltaTime으로 하는 것이다.

		//그러면 DeltaTime을 구하는 방법은 무엇이 있을까?
		//바로 컴퓨터 CPU의 진동수를 활용하는 것이다.
		//CPU 안에는 원자가 있고 원자는 초당 GHZ단위(1초의 10억 번 진동)로 진동한다. 예를 들어 5GHZ짜리 CPU가 있다면이 CPU는 1초 동안 50억 번 진동을 한다는 의미로 이것이 높을수록 연산 속도가 빠르다는 것을 의미한다.
		//이렇게 해서 우리는 컴퓨터 안에서 1초를 구할 수 있게 되었고 이를 활용해서 DeltaTime을 구하는 것이다.
		//그럼 DeltaTime은 어떻게 구하냐 하면 윈도우 API에 있는 함수를 이용하여 CPU의 고유 진동수와 현 프레임까지 진동한 진동수를 알 수 있는데 이걸 이용하여 DeltaTime을 구하는 것이 가능하다. 
	public:
		static void Initialize();
		static void Update();
		static void Render(HDC hdc);  //1초당 몇 프레임이 나오는지 확인해보기 위해 화면에 프레임 수를 출력하는 테스트 함수

		static float DeltaTime() {  //DeltaTime을 반환하는 함수(DeltaTime에 직접 접근은 불가하니 간접 접근이 가능하도록 구현)
			return DeltaTimeValue;
		}

	private:
		//LARGE_INTEGER는 DWORD(unsigned long)과 LONG(long) 변수 두 개를 합쳐서 하나처럼 즉, 8바이트짜리 자료형처럼 크게 사용하기 위한 구조체(LONGLONG(64비트 int형) 타입으로도 사용 가능)
		//진동수의 단위가 굉장히 크기 때문에 int나 long만으로는 감당이 되지 않아서 이와 같이 크기가 큰 자료형처럼 사용되는 구조체를 사용
		//private 멤버이지만 정적 변수이기 때문에 다른 멤버 변수들과의 구분을 위해 대문자로 이름 시작
		static LARGE_INTEGER CpuFrequency;  //해당 컴퓨터 CPU의 고유 진동수를 저장
		static LARGE_INTEGER PrevFrequency;  //이전 진동수(바로 이전 루프까지의 진동수)
		static LARGE_INTEGER CurrentFrequency;  //현재 진동수(현재 루프의 진동수)
		static float DeltaTimeValue;  //해당 컴퓨터의 DeltaTime(1프레임 당 실행하는 시간)
	};
}
